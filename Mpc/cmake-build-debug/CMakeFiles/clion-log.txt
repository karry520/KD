/snap/clion/135/bin/cmake/linux/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" /home/karrylee/PycharmProjects/KD/Mpc
-- The CXX compiler identification is GNU 9.3.0
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ - works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
ENCRYPTO_utils was not found: add ENCRYPTO_utils subdirectory
-- Found GMP: /usr/local/lib/libgmp.so  
-- Found GMPXX: /usr/local/lib/libgmpxx.so  
-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1f")  
-- Found Boost: /usr/local/lib/cmake/Boost-1.74.0/BoostConfig.cmake (found suitable version "1.74.0", minimum required is "1.66.0") found components: system thread 
RELIC was not found: add RELIC subdirectory
CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/CMakeLists.txt:40 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/CMakeLists.txt:42 (set):
  implicitly converting 'BOOl' to 'STRING' type.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is GNU 9.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc - works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done

-- Configuring RELIC 0.5.0...

-- Available switches (default = CHECK, VERBS, DOCUM):

   DEBUG=[off|on] Build with debugging support.
   PROFL=[off|on] Build with profiling support.
   CHECK=[off|on] Build with error-checking support.
   VERBS=[off|on] Build with detailed error messages.
   OVERH=[off|on] Build with overhead estimation.
   DOCUM=[off|on] Build documentation.
   STRIP=[off|on] Build only selected algorithms.
   QUIET=[off|on] Build with printing disabled.
   COLOR=[off|on] Build with colored output.
   BIGED=[off|on] Build with big-endian support.
   SHLIB=[off|on] Build shared library.
   STLIB=[off|on] Build static library.
   STBIN=[off|on] Build static binaries.
   AMALG=[off|on] Build amalgamation for better performance.

-- Number of times each test or benchmark is ran (default = 50, 1000):

   TESTS=n        If n > 0, build automated tests and run them n times.
   BENCH=n        If n > 0, build automated benchmarks and run them n * n times.

-- Number of available processor cores (default = 1):

   CORES=n        If n > 1, please enable multithreading support.

-- Available modules (default = ALL)

   WITH=BN       Multiple precision arithmetic.
   WITH=DV       Temporary double-precision digit vectors.
   WITH=FP       Prime field arithmetic.
   WITH=FPX      Prime extension field arithmetic.
   WITH=FB       Binary field arithmetic.
   WITH=EP       Elliptic curves over prime fields.
   WITH=EPX      Elliptic curves over quadratic extensions of prime fields.
   WITH=EB       Elliptic curves over binary fields.
   WITH=ED       Elliptic Edwards curves over prime fields.
   WTTH=EC       Elliptic curve cryptography.
   WITH=PB       Pairings over binary elliptic curves.
   WITH=PP       Pairings over prime elliptic curves.
   WTTH=PC       Pairing-based cryptography.
   WITH=BC       Block ciphers (symmetric encryption).
   WITH=MD       Message digests (hash functions).
   WITH=CP       Cryptographic protocols.
   WITH=ALL      All of the above.
   Note: the programmer is responsible for not using unselected modules.

-- Available arithmetic backends (default = easy):

   ARITH=easy     Easy-to-understand and portable, but slow backend.
   ARITH=gmp      Backend based on GNU Multiple Precision library.

   ARITH=gmp-sec  Same as above, but using constant-time code.

-- Available memory-allocation policies (default = AUTO):

   ALLOC=AUTO     All memory is automatically allocated.
   ALLOC=STATIC   All memory is allocated statically once.
   ALLOC=DYNAMIC  All memory is allocated dynamically on demand.
   ALLOC=STACK    All memory is allocated from the stack.

-- Supported operating systems (default = LINUX):

   OPSYS=         Undefined/No specific operating system.
   OPSYS=LINUX    GNU/Linux operating system.
   OPSYS=FREEBSD  FreeBSD operating system.
   OPSYS=MACOSX   Mac OS X operating system.
   OPSYS=WINDOWS  Windows operating system.
   OPSYS=DROID    Android operating system.
   OPSYS=DUINO    Arduino platform.

-- Supported multithreading APIs (default = UNDEF):

   MULTI=         No multithreading support.
   MULTI=OPENMP   Open Multi-Processing.
   MULTI=PTHREAD  POSIX threads.

-- Supported timers (default = HPROC):

   TIMER=         No timer.
   TIMER=HREAL    GNU/Linux realtime high-resolution timer.
   TIMER=HPROC    GNU/Linux per-process high-resolution timer.
   TIMER=HTHRD    GNU/Linux per-thread high-resolution timer.
   TIMER=ANSI     ANSI-compatible timer.
   TIMER=POSIX    POSIX-compatible timer.
   TIMER=CYCLE    Cycle-counting timer. (architecture-dependant)

-- Prefix to identify this build of the library (default = ""):

   LABEL=relic

-- Available architectures (default = X64):

   ARCH=          No specific architecture (disable some features).
   ARCH=AVR       Atmel AVR ATMega128 8-bit architecture.
   ARCH=MSP       TI MSP430 16-bit architecture.
   ARCH=ARM       ARM 32-bit architecture.
   ARCH=X86       Intel x86-compatible 32-bit architecture.
   ARCH=X64       AMD x86_64-compatible 64-bit architecture.

-- Available word sizes (default = 64):

   WSIZE=8        Build a 8-bit library.
   WSIZE=16       Build a 16-bit library.
   WSIZE=32       Build a 32-bit library.
   WSIZE=64       Build a 64-bit library.

-- Byte boundary to align digit vectors (default = 1):

   ALIGN=1        Do not align digit vectors.
   ALIGN=2        Align digit vectors into 16-bit boundaries.
   ALIGN=8        Align digit vectors into 64-bit boundaries.
   ALIGN=16       Align digit vectors into 128-bit boundaries.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/arch.cmake:52 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:128 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/arch.cmake:57 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:128 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Looking for include file execinfo.h
-- Looking for include file execinfo.h - found
-- Looking for backtrace
-- Looking for backtrace - found
-- Looking for backtrace_symbols
-- Looking for backtrace_symbols - found
-- Multiple precision arithmetic configuration (BN module):

   ** Options for the multiple precision module (default = 1024,DOUBLE,0):

      BN_PRECI=n        The base precision in bits. Let w be n in words.
      BN_MAGNI=DOUBLE   A multiple precision integer can store 2w words.
      BN_MAGNI=CARRY    A multiple precision integer can store w+1 words.
      BN_MAGNI=SINGLE   A multiple precision integer can store w words.
      BN_KARAT=n        The number of Karatsuba steps.

   ** Available multiple precision arithmetic methods (default = COMBA;COMBA;MONTY;SLIDE;STEIN;BASIC):

      Integer multiplication:
      BN_METHD=BASIC    Schoolbook multiplication.
      BN_METHD=COMBA    Comba multiplication.

      Integer squaring:
      BN_METHD=BASIC    Schoolbook squaring.
      BN_METHD=COMBA    Comba squaring.
      BN_METHD=MULTP    Reuse multiplication for squaring.

      Modular reduction:
      BN_METHD=BASIC    Division-based modular reduction.
      BN_METHD=BARRT    Barrett modular reduction.
      BN_METHD=MONTY    Montgomery modular reduction.
      BN_METHD=RADIX    Diminished radix modular reduction.

      Modular exponentiation:
      BN_METHD=BASIC    Binary modular exponentiation.
      BN_METHD=MONTY    Montgomery powering ladder.
      BN_METHD=SLIDE    Sliding window modular exponentiation.

      Greatest Common Divisor:
      BN_METHD=BASIC    Euclid's standard GCD algorithm.
      BN_METHD=LEHME    Lehmer's fast GCD algorithm.
      BN_METHD=STEIN    Stein's binary GCD algorithm.

      Prime generation:
      BN_METHD=BASIC    Basic prime generation.
      BN_METHD=SAFEP    Safe prime generation.
      BN_METHD=STRON    Strong prime generation.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/bn.cmake:47 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:130 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/bn.cmake:53 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:130 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Prime field arithmetic configuration (FP module):

   ** Arithmetic precision of the prime field module (default = 256,0,off,off):

      FP_PRIME=n        The prime modulus size in bits.
      FP_KARAT=n        The number of Karatsuba levels.
      FP_PMERS=[off|on] Prefer Pseudo-Mersenne primes over random primes.
      FP_QNRES=[off|on] Use -1 as quadratic non-residue (make sure that p = 3 mod 8).
      FP_WIDTH=w        Width w in [2,6] of window processing for exponentiation methods.

   ** Available prime field arithmetic methods (default = BASIC;COMBA;COMBA;MONTY;MONTY;SLIDE):
      Field addition
      FP_METHD=BASIC    Schoolbook addition.
      FP_METHD=INTEG    Integrated modular addition.

      Field multiplication
      FP_METHD=BASIC    Schoolbook multiplication.
      FP_METHD=INTEG    Integrated modular multiplication.
      FP_METHD=COMBA    Comba multiplication.

      Field squaring
      FP_METHD=BASIC    Schoolbook squaring.
      FP_METHD=INTEG    Integrated modular squaring.
      FP_METHD=COMBA    Comba squaring.
      FP_METHD=MULTP    Reuse multiplication for squaring.

      Modular reduction
      FP_METHD=BASIC    Division-based reduction.
      FP_METHD=QUICK    Fast reduction modulo special form prime (2^t - c, c > 0).
      FP_METHD=MONTY    Montgomery modular reduction.

      Field inversion
      FP_METHD=BASIC    Inversion by Fermat's Little Theorem.
      FP_METHD=BINAR    Binary Inversion algorithm.
      FP_METHD=MONTY    Montgomery inversion.
      FP_METHD=EXGCD    Inversion by the Extended Euclidean algorithm.
      FP_METHD=LOWER    Pass inversion to the lower level.

      Field exponentiation
      FP_METHD=BASIC    Binary exponentiation.
      FP_METHD=SLIDE    Sliding window exponentiation.
      FP_METHD=MONTY    Constant-time Montgomery powering ladder.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fp.cmake:49 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:131 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fp.cmake:55 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:131 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fp.cmake:60 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:131 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Prime extension field arithmetic configuration (FPX module):

   ** Available bilinear pairing methods (default = BASIC;BASIC;BASIC):
      Quadratic extension arithmetic:
      FPX_METHD=BASIC    Basic quadratic extension field arithmetic.
      FPX_METHD=INTEG    Quadratic extension field arithmetic with embedded modular reduction.

      Cubic extension arithmetic:
      FPX_METHD=BASIC    Basic cubic extension field arithmetic.
      FPX_METHD=INTEG    Cubic extension field arithmetic with embedded modular reduction.

      Extension field arithmetic:
      FPX_METHD=BASIC    Basic extension field arithmetic.
      FPX_METHD=LAZYR    Lazy-reduced extension field arithmetic.

-- Binary field arithmetic configuration (FB module):

   ** Options for the binary elliptic curve module (default = 283,0,on,on,on):

      FB_POLYN=n        The irreducible polynomial size in bits.
      FB_KARAT=n        The number of Karatsuba levels.
      FB_TRINO=[off|on] Prefer trinomials.
      FB_SQRTF=[off|on] Prefer square-root friendly polynomials.
      FB_PRECO=[off|on] Precompute multiplication table for sqrt(z).
      FB_WIDTH=w        Width w in [2,6] of window processing for exponentiation methods.

   ** Available binary field arithmetic methods (default = LODAH;QUICK;QUICK;BASIC;QUICK;QUICK;EXGCD;SLIDE;QUICK):

      Field multiplication:
      FB_METHD=BASIC    Right-to-left shift-and-add multiplication.
      FB_METHD=INTEG    Integrated modular multiplication.
      FB_METHD=LODAH    L�pez-Dahab comb multiplication with window of width 4.

      Field squaring:
      FB_METHD=BASIC    Bit manipulation squaring.
      FB_METHD=INTEG    Integrated modular squaring.
      FB_METHD=QUICK    Table-based squaring.

      Modular reduction:
      FB_METHD=BASIC    Shift-and-add modular reduction.
      FB_METHD=QUICK    Fast reduction modulo a trinomial or pentanomial.

      Field square root:
      FB_METHD=BASIC    Square root by repeated squaring.
      FB_METHD=QUICK    Fast square root extraction.

      Trace computation:
      FB_METHD=BASIC    Trace computation by repeated squaring.
      FB_METHD=QUICK    Fast trace computation.

      Quadratic equation solver:
      FB_METHD=BASIC    Solve a quadratic equation by half-trace computation.
      FB_METHD=QUICK    Fast solving with precomputed half-traces.

      Field inversion:
      FB_METHD=BASIC    Inversion by Fermat's Little Theorem.
      FB_METHD=BINAR    Binary Inversion algorithm.
      FB_METHD=ALMOS    Inversion by the Amost inverse algorithm.
      FB_METHD=EXGCD    Inversion by the Extended Euclidean algorithm.
      FB_METHD=ITOHT    Inversion by Itoh-Tsuji.
      FB_METHD=BRUCH    Hardware-friendly inversion by Brunner et al.
      FB_METHD=LOWER    Pass inversion to the lower level.

      Field exponentiation:
      FB_METHD=BASIC    Binary exponentiation.
      FB_METHD=SLIDE    Sliding window exponentiation.
      FB_METHD=MONTY    Constant-time Montgomery powering ladder.

      Iterated squaring/square-root:
      FB_METHD=BASIC    Iterated squaring/square-root by consecutive squaring/square-root.
      FB_METHD=QUICK    Iterated squaring/square-root by table-based method.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fb.cmake:62 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:133 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fb.cmake:68 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:133 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at ABY/extern/ENCRYPTO_utils/extern/relic/cmake/fb.cmake:73 (set):
  implicitly converting 'INTEGER' to 'STRING' type.
Call Stack (most recent call first):
  ABY/extern/ENCRYPTO_utils/extern/relic/CMakeLists.txt:133 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Prime elliptic curve arithmetic configuration (EP module):

   ** Options for the prime elliptic curve module (default = all on):

      EP_PLAIN=[off|on] Support for ordinary curves without endomorphisms.
      EP_SUPER=[off|on] Support for supersingular curves.
      EP_ENDOM=[off|on] Support for ordinary curves with endomorphisms.
      EP_MIXED=[off|on] Use mixed coordinates.

      EP_PRECO=[off|on] Build precomputation table for generator.
      EP_DEPTH=w        Width w in [2,8] of precomputation table for fixed point methods.
      EP_WIDTH=w        Width w in [2,6] of window processing for unknown point methods.

   ** Available prime elliptic curve methods (default = PROJC;LWNAF;COMBS;INTER):

      Point representation:
      EP_METHD=BASIC    Affine coordinates.
      EP_METHD=PROJC    Jacobian projective coordinates.

      Variable-base scalar multiplication:
      EP_METHD=BASIC    Binary method.
      EP_METHD=LWNAF    Left-to-right window NAF method (GLV for Koblitz curves).

      Fixed-base scalar multiplication:
      EP_METHD=BASIC    Binary method for fixed point multiplication.
      EP_METHD=COMBS    Single-table Comb method for fixed point multiplication.
      EP_METHD=COMBD    Double-table Comb method for fixed point multiplication.
      EP_METHD=LWNAF    Left-to-right window NAF method (GLV for Koblitz curves).

      Variable-base simultaneous scalar multiplication:
      EP_METHD=BASIC    Multiplication-and-addition simultaneous multiplication.
      EP_METHD=TRICK    Shamir's trick for simultaneous multiplication.
      EP_METHD=INTER    Interleaving of window NAFs (GLV for Koblitz curves).
      EP_METHD=JOINT    Joint sparse form.

-- Binary elliptic curve arithmetic configuration (EB module):

   ** Options for the binary elliptic curve module (default = on, w = 4):

      EB_PLAIN=[off|on] Support for ordinary curves without endomorphisms.
      EB_KBLTZ=[off|on] Support for Koblitz anomalous binary curves.
      EB_MIXED=[off|on] Use mixed coordinates.
      EB_PRECO=[off|on] Build precomputation table for generator.
      EB_DEPTH=w        Width w in [2,8] of precomputation table for fixed point methods.
      EB_WIDTH=w        Width w in [2,6] of window processing for unknown point methods.

   ** Available binary elliptic curve methods (default = PROJC;LWNAF;COMBS;INTER):

      Point representation:
      EB_METHD=BASIC    Affine coordinates.
      EB_METHD=PROJC    Projective coordinates (L�pez-Dahab for ordinary curves).

      Variable-base scalar multiplication:
      EB_METHD=BASIC    Binary double-and-add method.
      EB_METHD=LODAH    Lopez-Dahab constant-time point multiplication.
      EB_METHD=LWNAF    Left-to-right window (T)NAF method.
      EB_METHD=RWNAF    Right-to-left window (T)NAF method.
      EB_METHD=HALVE    Halving method.

      Fixed-base scalar multiplication:
      EB_METHD=BASIC    Binary method for fixed point multiplication.
      EB_METHD=COMBS    Single-table Comb method for fixed point multiplication.
      EB_METHD=COMBD    Double-table Comb method for fixed point multiplication.
      EB_METHD=LWNAF    Left-to-right window (T)NAF method.

      Variable-base simultaneous scalar multiplication:
      EB_METHD=BASIC    Multiplication-and-addition simultaneous multiplication.
      EB_METHD=TRICK    Shamir's trick for simultaneous multiplication.
      EB_METHD=INTER    Interleaving of window (T)NAFs.
      EB_METHD=JOINT    Joint sparse form.

-- Elliptic Edwards curve over prime fields arithmetic configuration (ED module):

   ** Options for the prime elliptic Edwards curve module (default = all on):
      ED_PRECO=[off|on] Build precomputation table for generator.
      ED_DEPTH=w        Width w in [2,6] of precomputation table for fixed point methods.
      ED_WIDTH=w        Width w in [2,6] of window processing for unknown point methods.

   ** Available prime elliptic Edwards curve methods (default = PROJC;LWNAF;COMBS;INTER):
      EP_METHD=PROJC  	 Simple projective twisted Edwards coordinates.
      EP_METHD=EXTND 	 Extended projective twisted Edwards coordinates.

      *** variable-base multiplication method ***
      ED_METHD=BASIC    	Binary method.
      ED_METHD=SLIDE    	Sliding window method.
      ED_METHD=MONTY    	Montgomery ladder method.
      ED_METHD=FIXWI    	2-bit fixed window method.
      ED_METHD=LWNAF    	Left-to-right window NAF method (GLV for Koblitz curves).

      *** fixed-base multiplication method ***
      ED_METHD=BASIC    	Binary method for fixed point multiplication.
      ED_METHD=COMBS    	Single-table Comb method for fixed point multiplication.
      ED_METHD=COMBD    	Double-table Comb method for fixed point multiplication.
      ED_METHD=LWNAF    	Left-to-right window NAF method (GLV for Koblitz curves).

      *** variable-base simultaneous multiplication method ***
      ED_METHD=BASIC    Multiplication-and-addition simultaneous multiplication.
      ED_METHD=TRICK    Shamir's trick for simultaneous multiplication.
      ED_METHD=INTER    Interleaving of window NAFs (GLV for Koblitz curves).
      ED_METHD=JOINT    Joint sparse form.

      Note: these methods must be given in order. Ex: ED_METHD="EXTND;LWNAF;COMBD;TRICK"

-- Elliptic curve cryptography configuration (EC module):

   ** Options for the binary elliptic curve module (default = on):

      EC_ENDOM=[off|on] Prefer (prime or binary) curves with endomorphisms.

   ** Available elliptic curve methods (default = PRIME):

      EC_METHD=PRIME    Use prime curves.
      EC_METHD=CHAR2    Use binary curves.
      EC_METHD=EDDIE    Use prime Edwards curves.

-- Bilinear pairings arithmetic configuration (PP module):

   ** Available bilinear pairing methods (default = BASIC;OATEP):

      Extension field arithmetic:
      PP_METHD=BASIC    Basic extension field arithmetic.
      PP_METHD=LAZYR    Lazy reduced extension field arithmetic.

      Pairing computation:
      PP_METHD=TATEP    Tate pairing.
      PP_METHD=WEILP    Weil pairing.
      PP_METHD=OATEP    Optimal ate pairing.

-- Message digest configuration (MD module):

   ** Available hash functions (default = SH256):

      MD_METHD=SHONE        SHA-1 hash function.
      MD_METHD=SH224        SHA-224 hash function.
      MD_METHD=SH256        SHA-256 hash function.
      MD_METHD=SH384        SHA-384 hash function.
      MD_METHD=SH512        SHA-512 hash function.
      MD_METHD=B2S160       BLAKE2s-160 hash function.
      MD_METHD=B2S256       BLAKE2s-256 hash function.

-- Cryptographic protocols configuration (CP module):

   ** Options for the cryptographic protocols module (default = PKCS1):

      CP_RSAPD=BASIC    RSA with basic padding.
      CP_RSAPD=PKCS1    RSA with PKCS#1 v1.5 padding.
      CP_RSAPD=PKCS2    RSA with PKCS#1 v2.1 padding.

   ** Available cryptographic protocols methods (default = QUICK;BASIC):

      CP_METHD=BASIC    Slow RSA decryption/signature.
      CP_METHD=QUICK    Fast RSA decryption/signature using CRT.

-- Available pseudo-random number generators (default = HASHD):

   RAND=HASHD     Use the HASH-DRBG generator. (recommended)
   RAND=UDEV      Use the operating system underlying generator.
   RAND=FIPS      Use the FIPS 186-2 (CN1) SHA1-based generator.
   RAND=RDRND     Use Intel RdRand instruction.

   RAND=CALL      Override the generator with a callback.

-- Available random number generator seeders (default = UDEV):

   SEED=          Use a zero seed. (horribly insecure!)
   SEED=LIBC      Use rand()/random() functions. (insecure!)
   SEED=WCGR      Use Windows' CryptGenRandom. (recommended)
   SEED=UDEV      Use non-blocking /dev/urandom. (recommended)
   SEED=DEV       Use blocking /dev/random. (recommended)
   SEED=RDRND     Use Intel RdRand instruction.

-- Configured operating system: LINUX
-- Compiler flags: -pipe -std=c99 -m64 -Wall   -O3 -funroll-loops -fomit-frame-pointer -march=core2 -msse4.2 -mpclmul
-- Linker flags: -L/home/karrylee/PycharmProjects/KD/Mpc/ABY/extern/ENCRYPTO_utils/extern/relic/src/low/curve2251-sse/ 
-- Configured /home/karrylee/PycharmProjects/KD/Mpc/ABY/extern/ENCRYPTO_utils/extern/relic/include/relic_conf.h.in
-- Configured GMP: /usr/local/lib/libgmp.so
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE) 
OTExtension was not found: add OTExtension subdirectory
-- Found Threads: TRUE  
-- Found Boost: /usr/local/lib/cmake/Boost-1.74.0/BoostConfig.cmake (found suitable version "1.74.0", minimum required is "1.66.0") found components: thread system 
-- pybind11 v2.6.1 dev1
-- Found PythonInterp: /usr/bin/python3.8 (found version "3.8.5") 
-- Found PythonLibs: /usr/lib/x86_64-linux-gnu/libpython3.8.so
-- Performing Test HAS_FLTO
-- Performing Test HAS_FLTO - Success
-- Configuring done
-- Generating done
-- Build files have been written to: /home/karrylee/PycharmProjects/KD/Mpc/cmake-build-debug
